def inner_procedure_check(form, form_lr, prime, l, Prime=[]):

 # Compute the Sturm bound for the forms
    bound_form = form.parent().sturm_bound()
    bound_lr = form_lr.parent().sturm_bound()
    bound = max(bound_form,bound_lr)
# Extract the level of the forms
    level = form.level()
    level_lr = form_lr.level()
# Initialize primes
    PRIMES = Primes(); 
    
    field_f = form.base_ring()
    field_g = form_lr.base_ring()
    
    if Prime==[]:
        
        if field_f == QQ:
            
            P = prime
            
            inner_procedure_check(form, form_lr, prime, l, P)
            
        else:
            PP = field_f.ideal(prime)
            
            if PP.is_principal():

                P = PP;

                inner_procedure_check(form, form_lr, prime, l, P)

            else:

                PP_factors = PP.prime_factors();

                for k in IntegerRange(len(PP_factors)):

                    P = PP_factors[k];

                    inner_procedure_check(form, form_lr, prime, l, P)

        
    else:
        
        if field_g == QQ:
            
            Prime_g = Prime

            flag_g=False
            
            j=0 
            FLAG=True
            
            while FLAG : 
                j=j+1 
                pp=PRIMES.unrank(j)
                if (pp<bound+1) & (Mod(l*level,pp)!=0):            
                    diff=form_lr.coefficient(pp)-form.coefficient(pp)
                    if (Mod(diff,Prime_g)==0):
                        flag_g=True  
                    else:
                        flag_g=False 
                        FLAG = False     

                else: 
                    FLAG=False
                    
            if flag_g:
                return [flag_g, Prime_g*ZZ]

            else:
                return [flag_g, NaN]
        
        else:
            
            Prime_g = field_g.ideal(Prime)
            
            Prime_g_factors = Prime_g.prime_factors();
            
            v=[];
            
            for k in IntegerRange(len(Prime_g_factors)):

                PPrime_g = Prime_g_factors[k];
                
                flag_g=False
                
                j=0 
                FLAG=True
                while FLAG : 
                    j=j+1 
                    pp=PRIMES.unrank(j)
                    if (pp<bound+1) & (Mod(l*level,pp)!=0):            
                        diff=form_lr.coefficient(pp)-form.coefficient(pp)
                        if (diff in PPrime_g):
                            flag_g=True  
                        else:
                            flag_g=False 
                            FLAG = False    

                    else: 
                        FLAG=False


                if flag_g:
                    v = v + [[flag_g, PPrime_g]];

            if len(v)==0:
                
                return [False, NaN]
            elif len(v)==1:
                return v[0]
            else: 
                
                return v


##################################################################################        

def check_level_raising(form, form_lr, prime, l):

# Extract the level, weight and character of the form
    level = form.level()
    wt = form.weight()
    chi = form.character()

#First check: 
#see Torti - On the level raising of cuspidal eigenforms modulo prime powers, Theorem 1.1 by Ribet, Diamond.

    M = (euler_phi(level)*level*(factorial(wt-2)))/2

    field_f = form.base_ring()
        
    if((prime == l) or (Mod(level,prime)==0) or (Mod(level,l)==0)): #what if l divides the level?
        
        return [False, NaN]

    elif(Mod(M,prime)!=0):
       
        MM = form.coefficient(l)^2 - (chi(l)*l^(wt-2)*(l+1)^2)


        if field_f == QQ:
            
            if(Mod(MM,prime)==0):
                
                return inner_procedure_check(form, form_lr, prime, l, prime)

            else:
                
                return [False, NaN]


        else:
            
            pp = field_f.ideal(prime)

            if pp.is_principal():

                P = pp;

                if(MM in P):
                    
                    return inner_procedure_check(form, form_lr, prime, l, P) #FIX IT! One has to deal with P generic, not P a prime in ZZ

                else:
                    
                    return [False, NaN]


            else:

                pp_factors = pp.prime_factors();

                v=[];
                
                for k in IntegerRange(len(pp_factors)):

                    P = pp_factors[k];
                    
                    
                    if(MM in P):

                        v = v + [P+[inner_procedure_check(form, form_lr, prime, l, P)]]

                if len(v)==0:
                    
                    return [P,False, NaN]
                
                else:
                
                    return v

    else:
        
        if field_f == QQ:
            return inner_procedure_check(form, form_lr, prime, l, prime)
        else:
            return "Still to be implemented"
###
